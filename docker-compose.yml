services:
  # reverse proxy
  caddy:
    image: caddy:2-alpine
    container_name: caddy
    ports:
      - "80:80" # http
      - "443:443" # https
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    restart: unless-stopped

  # frontend
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    image: client:v1
    container_name: client
    # ports: # for local dev
    #   - "3000:80"
    restart: unless-stopped
    depends_on:
      - server

  # backend
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    image: server:v1
    container_name: server
    # ports: # for local dev
    #   - "5000:5000"
    restart: unless-stopped
    env_file:
      - .env
      - ./server/.env
    depends_on:
      db_pg:
        condition: service_healthy

  # database
  db_pg:
    image: pgvector/pgvector:pg17
    container_name: db_pg
    # ports: # for local dev
    #   - "5432:5432"
    environment:
      - POSTGRES_USER=${PGUSER}
      - POSTGRES_PASSWORD=${PGPASSWORD}
      - POSTGRES_DB=${PGDATABASE}
    volumes:
      - ./database/postgres/data:/var/lib/postgresql/data
      - ./database/backups:/backups
      # security (for production)
      - ./database/pgConfig/pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
      - ./database/pgConfig/postgresql.conf:/var/lib/postgresql/data/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # database backup
  db_services:
    build:
      context: ./database
      dockerfile: Dockerfile
    image: db_services:v1
    container_name: db_services
    volumes:
      - ./database/backups:/backups
    env_file:
      - .env
    depends_on:
      db_pg:
        condition: service_healthy
