services:
  # reverse proxy (for production)
  traefik:
    image: traefik:v3.3
    command:
      - "--api.insecure=true"
      - "--providers.docker"
      # https
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=lohkianfeng@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      # redirect http to https
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    ports:
      - "80:80" # http
      - "443:443" # https
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./letsencrypt:/letsencrypt # https

  # frontend (for production)
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    image: client:v1
    container_name: client
    # ports: # for local dev
    #   - "3000:80"
    restart: unless-stopped
    volumes:
      - ./client/nginx.conf:/etc/nginx/conf.d/default.conf
    labels: # for traefik
      - "traefik.http.routers.client-router.rule=Host(`localhost`)" # dev
      - "traefik.http.routers.client-router.rule=Host(`kianfeng.com`)" # prod
      # https
      - "traefik.enable=true"
      - "traefik.http.routers.client-router.entryPoints=websecure"
      - "traefik.http.routers.client-router.tls.certResolver=myresolver"
    depends_on:
      - server

  # backend
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    image: server:v1
    container_name: server
    # ports: # for local dev
    #   - "5000:5000"
    restart: unless-stopped
    env_file:
      - .env
      - ./server/.env
    labels: # for traefik
      - "traefik.http.routers.server-router.rule=(Host(`localhost`) && PathPrefix(`/api`))" # dev
      - "traefik.http.routers.server-router.rule=(Host(`kianfeng.com`) && PathPrefix(`/api`))" # prod
      # https
      - "traefik.enable=true"
      - "traefik.http.routers.server-router.entryPoints=websecure"
      - "traefik.http.routers.server-router.tls.certResolver=myresolver"
    depends_on:
      db_pg:
        condition: service_healthy

  # database
  db_pg:
    image: postgres:17-alpine
    container_name: db_pg
    # ports: # for local dev
    #   - "5432:5432"
    environment:
      - POSTGRES_USER=${PGUSER}
      - POSTGRES_PASSWORD=${PGPASSWORD}
      - POSTGRES_DB=${PGDATABASE}
    volumes:
      - ./database/postgres/data:/var/lib/postgresql/data
      - ./database/backups:/backups
      # security (for production)
      - ./database/pgConfig/pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
      - ./database/pgConfig/postgresql.conf:/var/lib/postgresql/data/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # database backup
  db_services:
    build:
      context: ./database
      dockerfile: Dockerfile
    image: db_services:v1
    container_name: db_services
    volumes:
      - ./database/backups:/backups
    env_file:
      - .env
    depends_on:
      db_pg:
        condition: service_healthy
